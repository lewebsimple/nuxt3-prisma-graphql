type Mutation {
  userCreate(email: String!, password: String!): User!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  users(after: ID, before: ID, first: Int, last: Int): QueryUsersConnection!

  """Current package name and version"""
  version: String!
}

type QueryUsersConnection {
  edges: [QueryUsersConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryUsersConnectionEdge {
  cursor: ID!
  node: User!
}

type Subscription {
  heartbeat: Boolean!
}

type User implements Node {
  email: String!
  id: ID!
  role: UserRole!
}

enum UserRole {
  ADMIN
  EDITOR
  GUEST
  UNVERIFIED
}